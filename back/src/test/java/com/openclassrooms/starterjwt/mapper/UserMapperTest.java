package com.openclassrooms.starterjwt.mapper;

import com.openclassrooms.starterjwt.dto.UserDto;
import com.openclassrooms.starterjwt.models.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class UserMapperTest {

    private UserMapper userMapper;

    @BeforeEach
    void initMapper() {
        // Initialize the UserMapper instance generated by MapStruct
        userMapper = Mappers.getMapper(UserMapper.class);
    }

    @Test
    void shouldMapUserDtoToUser() {
        // Arrange: Create a UserDto with custom data
        UserDto userDto = new UserDto();
        userDto.setId(10L);
        userDto.setEmail("alex.jones@sample.com");
        userDto.setFirstName("Alex");
        userDto.setLastName("Jones");
        userDto.setPassword("MyStrongPass@2024");
        userDto.setAdmin(true);
        userDto.setCreatedAt(LocalDateTime.now());
        userDto.setUpdatedAt(LocalDateTime.now());

        // Act: Map UserDto to User
        User user = userMapper.toEntity(userDto);

        // Assert: Ensure User is mapped correctly
        assertNotNull(user, "Mapped User should not be null");
        assertEquals(userDto.getId(), user.getId(), "IDs should match");
        assertEquals(userDto.getEmail(), user.getEmail(), "Emails should match");
        assertEquals(userDto.getFirstName(), user.getFirstName(), "First names should match");
        assertEquals(userDto.getLastName(), user.getLastName(), "Last names should match");
        assertEquals(userDto.getPassword(), user.getPassword(), "Passwords should match");
        assertEquals(userDto.isAdmin(), user.isAdmin(), "Admin status should match");
        assertEquals(userDto.getCreatedAt(), user.getCreatedAt(), "CreatedAt should match");
        assertEquals(userDto.getUpdatedAt(), user.getUpdatedAt(), "UpdatedAt should match");
    }

    @Test
    void shouldMapUserToUserDto() {
        // Arrange: Create a User with custom data
        User user = User.builder()
                .id(20L)
                .email("jordan.lee@mockdata.com")
                .firstName("Jordan")
                .lastName("Lee")
                .password("SecurePass2024!")
                .admin(false)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();

        // Act: Map User to UserDto
        UserDto userDto = userMapper.toDto(user);

        // Assert: Ensure UserDto is mapped correctly
        assertNotNull(userDto, "Mapped UserDto should not be null");
        assertEquals(user.getId(), userDto.getId(), "IDs should match");
        assertEquals(user.getEmail(), userDto.getEmail(), "Emails should match");
        assertEquals(user.getFirstName(), userDto.getFirstName(), "First names should match");
        assertEquals(user.getLastName(), userDto.getLastName(), "Last names should match");
        assertEquals(user.getPassword(), userDto.getPassword(), "Passwords should match");
        assertEquals(user.isAdmin(), userDto.isAdmin(), "Admin status should match");
        assertEquals(user.getCreatedAt(), userDto.getCreatedAt(), "CreatedAt should match");
        assertEquals(user.getUpdatedAt(), userDto.getUpdatedAt(), "UpdatedAt should match");
    }

    @Test
    void shouldMapUserDtoListToUserList() {
        // Arrange: Create a list of UserDto objects
        UserDto userDto1 = new UserDto();
        userDto1.setId(30L);
        userDto1.setEmail("chris.parker@demo.com");
        userDto1.setFirstName("Chris");
        userDto1.setLastName("Parker");
        userDto1.setPassword("Chris123!");

        UserDto userDto2 = new UserDto();
        userDto2.setId(31L);
        userDto2.setEmail("morgan.smith@demo.com");
        userDto2.setFirstName("Morgan");
        userDto2.setLastName("Smith");
        userDto2.setPassword("Morgan@456");

        List<UserDto> userDtoList = Arrays.asList(userDto1, userDto2);

        // Act: Map UserDto list to User list
        List<User> userList = userMapper.toEntity(userDtoList);

        // Assert: Ensure the list is mapped correctly
        assertNotNull(userList, "Mapped User list should not be null");
        assertEquals(2, userList.size(), "User list size should be 2");
        assertEquals(userDto1.getId(), userList.get(0).getId(), "First User ID should match");
        assertEquals(userDto2.getId(), userList.get(1).getId(), "Second User ID should match");
    }

    @Test
    void shouldMapUserListToUserDtoList() {
        // Arrange: Create a list of User objects
        User user1 = User.builder()
                .id(40L)
                .email("alex.brown@testmail.com")
                .firstName("Alex")
                .lastName("Brown")
                .password("Alex@123")
                .admin(false)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();

        User user2 = User.builder()
                .id(41L)
                .email("jamie.green@testmail.com")
                .firstName("Jamie")
                .lastName("Green")
                .password("Jamie@789")
                .admin(true)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();

        List<User> userList = Arrays.asList(user1, user2);

        // Act: Map User list to UserDto list
        List<UserDto> userDtoList = userMapper.toDto(userList);

        // Assert: Ensure the list is mapped correctly
        assertNotNull(userDtoList, "Mapped UserDto list should not be null");
        assertEquals(2, userDtoList.size(), "UserDto list size should be 2");
        assertEquals(user1.getId(), userDtoList.get(0).getId(), "First UserDto ID should match");
        assertEquals(user2.getId(), userDtoList.get(1).getId(), "Second UserDto ID should match");
    }
}
